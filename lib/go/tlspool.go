/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: go-tlspool.i

package tlspool

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef _gostring_ swig_type_3;
typedef _gostring_ swig_type_4;
typedef _gostring_ swig_type_5;
typedef _gostring_ swig_type_6;
typedef _gostring_ swig_type_7;
typedef _gostring_ swig_type_8;
typedef _gostring_ swig_type_9;
typedef _gostring_ swig_type_10;
typedef _gostring_ swig_type_11;
typedef _gostring_ swig_type_12;
typedef _gostring_ swig_type_13;
typedef _gostring_ swig_type_14;
typedef _gostring_ swig_type_15;
typedef _gostring_ swig_type_16;
typedef _gostring_ swig_type_17;
typedef _gostring_ swig_type_18;
typedef _gostring_ swig_type_19;
extern void _wrap_Swig_free_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_tlspool_03ad2d7a43d805c7(swig_intgo arg1);
extern void _wrap_error_data_tlserrno_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_error_data_tlserrno_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_error_data_message_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_type_1 arg2);
extern swig_type_2 _wrap_error_data_message_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_new_error_data_tlspool_03ad2d7a43d805c7(void);
extern void _wrap_delete_error_data_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_ping_data_YYYYMMDD_producer_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_type_3 arg2);
extern swig_type_4 _wrap_ping_data_YYYYMMDD_producer_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_ping_data_facilities_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_ping_data_facilities_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_new_ping_data_tlspool_03ad2d7a43d805c7(void);
extern void _wrap_delete_ping_data_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_flags_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_starttls_data_flags_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_local_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_starttls_data_local_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_ipproto_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, char arg2);
extern char _wrap_starttls_data_ipproto_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_streamid_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, short arg2);
extern short _wrap_starttls_data_streamid_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_localid_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_type_5 arg2);
extern swig_type_6 _wrap_starttls_data_localid_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_remoteid_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_type_7 arg2);
extern swig_type_8 _wrap_starttls_data_remoteid_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_ctlkey_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_voidp arg2);
extern swig_voidp _wrap_starttls_data_ctlkey_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_service_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_type_9 arg2);
extern swig_type_10 _wrap_starttls_data_service_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_starttls_data_timeout_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_starttls_data_timeout_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_new_starttls_data_tlspool_03ad2d7a43d805c7(void);
extern void _wrap_delete_starttls_data_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_control_data_flags_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_control_data_flags_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_control_data_ctlkey_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_voidp arg2);
extern swig_voidp _wrap_control_data_ctlkey_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_control_data_name_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_type_11 arg2);
extern swig_type_12 _wrap_control_data_name_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_new_control_data_tlspool_03ad2d7a43d805c7(void);
extern void _wrap_delete_control_data_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_prng_data_in1_len_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, short arg2);
extern short _wrap_prng_data_in1_len_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_prng_data_in2_len_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, short arg2);
extern short _wrap_prng_data_in2_len_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_prng_data_prng_len_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, short arg2);
extern short _wrap_prng_data_prng_len_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_prng_data_buffer_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_voidp arg2);
extern swig_voidp _wrap_prng_data_buffer_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_new_prng_data_tlspool_03ad2d7a43d805c7(void);
extern void _wrap_delete_prng_data_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern void _wrap_socket_data_unix_socket_set_tlspool_03ad2d7a43d805c7(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_socket_data_unix_socket_get_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern uintptr_t _wrap_new_socket_data_tlspool_03ad2d7a43d805c7(void);
extern void _wrap_delete_socket_data_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern swig_intgo _wrap_Internal_pid_tlspool_03ad2d7a43d805c7(swig_type_13 arg1);
extern swig_intgo _wrap_Internal_open_poolhandle_tlspool_03ad2d7a43d805c7(swig_type_14 arg1);
extern swig_intgo _wrap_Internal_ping_tlspool_03ad2d7a43d805c7(uintptr_t arg1);
extern swig_intgo _wrap_Internal_starttls_tlspool_03ad2d7a43d805c7(swig_intgo arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_Internal_control_detach_tlspool_03ad2d7a43d805c7(swig_voidp arg1);
extern swig_intgo _wrap_Internal_control_reattach_tlspool_03ad2d7a43d805c7(swig_voidp arg1);
extern swig_intgo _wrap_Internal_prng_tlspool_03ad2d7a43d805c7(swig_type_15 arg1, swig_type_16 arg2, short arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_type_17 _wrap_tlspool_configvar_tlspool_03ad2d7a43d805c7(swig_type_18 arg1, swig_type_19 arg2);
extern swig_intgo _wrap_PIOC_LOCAL_tlspool_03ad2d7a43d805c7(void);
#undef intgo
*/
// #cgo LDFLAGS: -ltlspool
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_tlspool_03ad2d7a43d805c7(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrError_data uintptr

func (p SwigcptrError_data) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrError_data) SwigIsError_data() {
}

func (arg1 SwigcptrError_data) SetTlserrno(arg2 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_error_data_tlserrno_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrError_data) GetTlserrno() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_error_data_tlserrno_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrError_data) SetMessage(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_error_data_message_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrError_data) GetMessage() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_error_data_message_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func NewError_data() (_swig_ret Error_data) {
	var swig_r Error_data
	swig_r = (Error_data)(SwigcptrError_data(C._wrap_new_error_data_tlspool_03ad2d7a43d805c7()))
	return swig_r
}

func DeleteError_data(arg1 Error_data) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_error_data_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

type Error_data interface {
	Swigcptr() uintptr
	SwigIsError_data()
	SetTlserrno(arg2 int)
	GetTlserrno() (_swig_ret int)
	SetMessage(arg2 string)
	GetMessage() (_swig_ret string)
}

type SwigcptrPing_data uintptr

func (p SwigcptrPing_data) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPing_data) SwigIsPing_data() {
}

func (arg1 SwigcptrPing_data) SetYYYYMMDD_producer(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_ping_data_YYYYMMDD_producer_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), *(*C.swig_type_3)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrPing_data) GetYYYYMMDD_producer() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_ping_data_YYYYMMDD_producer_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (arg1 SwigcptrPing_data) SetFacilities(arg2 uint) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_ping_data_facilities_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrPing_data) GetFacilities() (_swig_ret uint) {
	var swig_r uint
	_swig_i_0 := arg1
	swig_r = (uint)(C._wrap_ping_data_facilities_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func NewPing_data() (_swig_ret Ping_data) {
	var swig_r Ping_data
	swig_r = (Ping_data)(SwigcptrPing_data(C._wrap_new_ping_data_tlspool_03ad2d7a43d805c7()))
	return swig_r
}

func DeletePing_data(arg1 Ping_data) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_ping_data_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

type Ping_data interface {
	Swigcptr() uintptr
	SwigIsPing_data()
	SetYYYYMMDD_producer(arg2 string)
	GetYYYYMMDD_producer() (_swig_ret string)
	SetFacilities(arg2 uint)
	GetFacilities() (_swig_ret uint)
}

type SwigcptrStarttls_data uintptr

func (p SwigcptrStarttls_data) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStarttls_data) SwigIsStarttls_data() {
}

func (arg1 SwigcptrStarttls_data) SetFlags(arg2 uint) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_flags_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrStarttls_data) GetFlags() (_swig_ret uint) {
	var swig_r uint
	_swig_i_0 := arg1
	swig_r = (uint)(C._wrap_starttls_data_flags_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStarttls_data) SetLocal(arg2 uint) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_local_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrStarttls_data) GetLocal() (_swig_ret uint) {
	var swig_r uint
	_swig_i_0 := arg1
	swig_r = (uint)(C._wrap_starttls_data_local_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStarttls_data) SetIpproto(arg2 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_ipproto_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.char(_swig_i_1))
}

func (arg1 SwigcptrStarttls_data) GetIpproto() (_swig_ret byte) {
	var swig_r byte
	_swig_i_0 := arg1
	swig_r = (byte)(C._wrap_starttls_data_ipproto_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStarttls_data) SetStreamid(arg2 uint16) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_streamid_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.short(_swig_i_1))
}

func (arg1 SwigcptrStarttls_data) GetStreamid() (_swig_ret uint16) {
	var swig_r uint16
	_swig_i_0 := arg1
	swig_r = (uint16)(C._wrap_starttls_data_streamid_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStarttls_data) SetLocalid(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_localid_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), *(*C.swig_type_5)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrStarttls_data) GetLocalid() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_starttls_data_localid_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (arg1 SwigcptrStarttls_data) SetRemoteid(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_remoteid_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), *(*C.swig_type_7)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrStarttls_data) GetRemoteid() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_starttls_data_remoteid_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (arg1 SwigcptrStarttls_data) SetCtlkey(arg2 *byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_ctlkey_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func (arg1 SwigcptrStarttls_data) GetCtlkey() (_swig_ret *byte) {
	var swig_r *byte
	_swig_i_0 := arg1
	swig_r = (*byte)(C._wrap_starttls_data_ctlkey_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStarttls_data) SetService(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_service_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), *(*C.swig_type_9)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrStarttls_data) GetService() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_starttls_data_service_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (arg1 SwigcptrStarttls_data) SetTimeout(arg2 uint) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_starttls_data_timeout_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrStarttls_data) GetTimeout() (_swig_ret uint) {
	var swig_r uint
	_swig_i_0 := arg1
	swig_r = (uint)(C._wrap_starttls_data_timeout_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func NewStarttls_data() (_swig_ret Starttls_data) {
	var swig_r Starttls_data
	swig_r = (Starttls_data)(SwigcptrStarttls_data(C._wrap_new_starttls_data_tlspool_03ad2d7a43d805c7()))
	return swig_r
}

func DeleteStarttls_data(arg1 Starttls_data) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_starttls_data_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

type Starttls_data interface {
	Swigcptr() uintptr
	SwigIsStarttls_data()
	SetFlags(arg2 uint)
	GetFlags() (_swig_ret uint)
	SetLocal(arg2 uint)
	GetLocal() (_swig_ret uint)
	SetIpproto(arg2 byte)
	GetIpproto() (_swig_ret byte)
	SetStreamid(arg2 uint16)
	GetStreamid() (_swig_ret uint16)
	SetLocalid(arg2 string)
	GetLocalid() (_swig_ret string)
	SetRemoteid(arg2 string)
	GetRemoteid() (_swig_ret string)
	SetCtlkey(arg2 *byte)
	GetCtlkey() (_swig_ret *byte)
	SetService(arg2 string)
	GetService() (_swig_ret string)
	SetTimeout(arg2 uint)
	GetTimeout() (_swig_ret uint)
}

type SwigcptrControl_data uintptr

func (p SwigcptrControl_data) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrControl_data) SwigIsControl_data() {
}

func (arg1 SwigcptrControl_data) SetFlags(arg2 uint) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_control_data_flags_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrControl_data) GetFlags() (_swig_ret uint) {
	var swig_r uint
	_swig_i_0 := arg1
	swig_r = (uint)(C._wrap_control_data_flags_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrControl_data) SetCtlkey(arg2 *byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_control_data_ctlkey_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func (arg1 SwigcptrControl_data) GetCtlkey() (_swig_ret *byte) {
	var swig_r *byte
	_swig_i_0 := arg1
	swig_r = (*byte)(C._wrap_control_data_ctlkey_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrControl_data) SetName(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_control_data_name_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), *(*C.swig_type_11)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrControl_data) GetName() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_control_data_name_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func NewControl_data() (_swig_ret Control_data) {
	var swig_r Control_data
	swig_r = (Control_data)(SwigcptrControl_data(C._wrap_new_control_data_tlspool_03ad2d7a43d805c7()))
	return swig_r
}

func DeleteControl_data(arg1 Control_data) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_control_data_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

type Control_data interface {
	Swigcptr() uintptr
	SwigIsControl_data()
	SetFlags(arg2 uint)
	GetFlags() (_swig_ret uint)
	SetCtlkey(arg2 *byte)
	GetCtlkey() (_swig_ret *byte)
	SetName(arg2 string)
	GetName() (_swig_ret string)
}

type SwigcptrPrng_data uintptr

func (p SwigcptrPrng_data) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPrng_data) SwigIsPrng_data() {
}

func (arg1 SwigcptrPrng_data) SetIn1_len(arg2 int16) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_prng_data_in1_len_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.short(_swig_i_1))
}

func (arg1 SwigcptrPrng_data) GetIn1_len() (_swig_ret int16) {
	var swig_r int16
	_swig_i_0 := arg1
	swig_r = (int16)(C._wrap_prng_data_in1_len_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrPrng_data) SetIn2_len(arg2 int16) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_prng_data_in2_len_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.short(_swig_i_1))
}

func (arg1 SwigcptrPrng_data) GetIn2_len() (_swig_ret int16) {
	var swig_r int16
	_swig_i_0 := arg1
	swig_r = (int16)(C._wrap_prng_data_in2_len_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrPrng_data) SetPrng_len(arg2 int16) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_prng_data_prng_len_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.short(_swig_i_1))
}

func (arg1 SwigcptrPrng_data) GetPrng_len() (_swig_ret int16) {
	var swig_r int16
	_swig_i_0 := arg1
	swig_r = (int16)(C._wrap_prng_data_prng_len_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrPrng_data) SetBuffer(arg2 *byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_prng_data_buffer_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func (arg1 SwigcptrPrng_data) GetBuffer() (_swig_ret *byte) {
	var swig_r *byte
	_swig_i_0 := arg1
	swig_r = (*byte)(C._wrap_prng_data_buffer_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func NewPrng_data() (_swig_ret Prng_data) {
	var swig_r Prng_data
	swig_r = (Prng_data)(SwigcptrPrng_data(C._wrap_new_prng_data_tlspool_03ad2d7a43d805c7()))
	return swig_r
}

func DeletePrng_data(arg1 Prng_data) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_prng_data_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

type Prng_data interface {
	Swigcptr() uintptr
	SwigIsPrng_data()
	SetIn1_len(arg2 int16)
	GetIn1_len() (_swig_ret int16)
	SetIn2_len(arg2 int16)
	GetIn2_len() (_swig_ret int16)
	SetPrng_len(arg2 int16)
	GetPrng_len() (_swig_ret int16)
	SetBuffer(arg2 *byte)
	GetBuffer() (_swig_ret *byte)
}

type SwigcptrSocket_data uintptr

func (p SwigcptrSocket_data) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSocket_data) SwigIsSocket_data() {
}

func (arg1 SwigcptrSocket_data) SetUnix_socket(arg2 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_socket_data_unix_socket_set_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrSocket_data) GetUnix_socket() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_socket_data_unix_socket_get_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func NewSocket_data() (_swig_ret Socket_data) {
	var swig_r Socket_data
	swig_r = (Socket_data)(SwigcptrSocket_data(C._wrap_new_socket_data_tlspool_03ad2d7a43d805c7()))
	return swig_r
}

func DeleteSocket_data(arg1 Socket_data) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_socket_data_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0))
}

type Socket_data interface {
	Swigcptr() uintptr
	SwigIsSocket_data()
	SetUnix_socket(arg2 int)
	GetUnix_socket() (_swig_ret int)
}

func Internal_pid(arg1 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Internal_pid_tlspool_03ad2d7a43d805c7(*(*C.swig_type_13)(unsafe.Pointer(&_swig_i_0))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Internal_open_poolhandle(arg1 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Internal_open_poolhandle_tlspool_03ad2d7a43d805c7(*(*C.swig_type_14)(unsafe.Pointer(&_swig_i_0))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Internal_ping(arg1 Ping_data) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_Internal_ping_tlspool_03ad2d7a43d805c7(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Internal_starttls(arg1 int, arg2 Starttls_data, arg3 uintptr, arg4 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_Internal_starttls_tlspool_03ad2d7a43d805c7(C.swig_intgo(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func Internal_control_detach(arg1 *byte) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Internal_control_detach_tlspool_03ad2d7a43d805c7(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func Internal_control_reattach(arg1 *byte) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Internal_control_reattach_tlspool_03ad2d7a43d805c7(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func Internal_prng(arg1 string, arg2 string, arg3 uint16, arg4 *byte, arg5 *byte) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_Internal_prng_tlspool_03ad2d7a43d805c7(*(*C.swig_type_15)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_16)(unsafe.Pointer(&_swig_i_1)), C.short(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Tlspool_configvar(arg1 string, arg2 string) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r_p := C._wrap_tlspool_configvar_tlspool_03ad2d7a43d805c7(*(*C.swig_type_18)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_19)(unsafe.Pointer(&_swig_i_1)))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}




// Connection objects represent a single (network) connection being protected
// through the TLS Pool.  It is constructed with NewConnection() and deleted
// with DeleteConnection().  During its life, parameters will be setup in it,
// and then a call to its StartTLS() method initiates the TLS handshake.
type Connection struct {
	TLSdata Starttls_data
	cryptsock int
	plainsock int
	ctlkey [16] byte //TODO// ctlkey ctlkey_t
}

// Pid() returns the process identity of the TLS Pool.  When no pidfile is
// provided, the default path as configured in the TLS Pool library will be used.
// When no TLS Pool is found, ok returns 0.
func Pid (pidfile *string) (pid int, ok int) {
	pid = Internal_pid (pidfile)
	if pid < 0 {
		return -1, 0
	}
	return pid, 1
}


// OpenPoolHandle() returns a handle to the TLS Pool.  If no connection has been
// made to the TLS Pool yet, it will try to open it at the given path, or else
// at the default path.
func OpenPoolHandle (path *string) (handle int, ok int) {
	hdl := Internal_open_poolhandle (path)
	if hdl < 0 {
		return -1, 0
	}
	return hdl, 1
}


// Ping() ensures that it is connected to the TLS Pool, and exchanges
// a number of parameters, such as API function and supported features.
// There is no need to have a Connection for this call.
// Use "" and/or 0 as arguments to get decent defaults filled in.
// The function returns 0 in ok when something stopped it from working
//
func Ping (yyyymmdd_producer string, facilities uint) (ymdprod string, facil uint, ok int) {
	pingdata := NewPing_data ()
	defer DeletePing_data (pingdata)
	if yyyymmdd_producer == "" {
		yyyymmdd_producer = TLSPOOL_IDENTITY_V2
	}
	if facilities == 0 {
		facilities = PIOF_FACILITY_ALL_CURRENT
	}
	pingdata.SetYYYYMMDD_producer (yyyymmdd_producer)
	pingdata.SetFacilities (facilities)
	if Internal_ping (pingdata) != 0 {
		return "", 0, 0
	}
	return pingdata.GetYYYYMMDD_producer (), pingdata.GetFacilities (), 1
}

// NewConnection() returns a TLS connection to be managed by the TLS Pool.
// The structure contains a TLSdata structure, in which the customary
// settings need to be made before invoking starttls().
//
// Call this function with a file descriptor for the side that will be
// encrypted, for instance after just having accepted a connection or after
// a connection has gone through a STARTTLS command exchange.
//
// The returned Connection MUST be deleted with DeleteConnection at the
// end of its life; you MAY use defer to achieve that.
//
func NewConnection (cryptsock int) (cnx *Connection, ok int) {
	if cryptsock < 0 {
		return nil, 0
	}
	neo := new (Connection)
	neo.TLSdata = NewStarttls_data ()
	neo.cryptsock = cryptsock
	neo.plainsock = -1
	return neo, 1
}

// DeleteConnection() cleans up what has been created by NewConnection().
// This MUST be called when NewConnection succeeds, so as to avoid
// leaking memory by not decoupling the C backend structure.
//
func (cnx Connection) DeleteConnection () {
	if cnx.TLSdata != nil {
		DeleteStarttls_data (cnx.TLSdata)
	}
}

// StartTLS() uses the prepared information in a Connection to start TLS
// over the cryptsock that was provided to NewConnection().
//
func (cnx Connection) StartTLS (plainsock int) (ok int) {
	if cnx.plainsock < 0 {
		return 0
	}
	//TODO// Implement, instead of just scaring out and reporting error
	return 0
}

// PRNG() produces length bytes of randomness from the master key, after mixing
// it with the label and optional context value in ctxvalue.  The procedure has
// been described in RFC 5705.
func (cnx Connection) PRNG (length uint, label *byte, ctxvalue *byte) (random []byte, ok int) {
	if label == nil {
		return nil, 0
	}
	//TODO// or just call "func Prng()" in tlspool.go with its 5 params?!?
	prng := NewPrng_data ()
	defer DeletePrng_data (prng)
	buf := prng.GetBuffer ()
	if TLSPOOL_CTLKEYLEN + len (label) + len (ctxvalue) > len (buf) {
		return nil, 0
	}
	//TODO// write cnx.ctlkey
	prng.SetPrng_len (length)
	prng.SetIn1_len (len (label))
	//TODO// write cnx.label
	if ctxvalue != nil {
		prng.SetIn2_len (len (ctxvalue))
		//TODO// write cnx.ctxvalue
	} else {
		prng.SetIn2_len (-1)
	}
	rv := Internal_prng (label, ctxvalue, length, buf, cnx.ctlkey)
	if rv < 0 {
		return nil, 0
	}
	//TODO// Actually return the bytes up to length, as contained within buf
	return buf, 1
}

//	def __init__ (self, cryptsocket,
//					plainsocket=None,
//					ctlkey=None, 
//					localid='',
//					remoteid='',
//					flags=0,
//					local_flags=0,
//					ipproto=socket.IPPROTO_TCP,
//					streamid=0,
//					service='',
//					timeout=0):


const PIOC_CONTROL_DETACH_V2 int = 0x00000100
const PIOC_CONTROL_REATTACH_V2 int = 0x00000101
const PIOC_ERROR_V2 int = 0x00000001
const PIOC_LIDENTRY_CALLBACK_V2 int = 0x00000201
const PIOC_LIDENTRY_REGISTER_V2 int = 0x00000200
func _swig_getPIOC_LOCAL() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_PIOC_LOCAL_tlspool_03ad2d7a43d805c7())
	return swig_r
}

var PIOC_LOCAL int = _swig_getPIOC_LOCAL()
const PIOC_PINENTRY_V2 int = 0x00000029
const PIOC_PING_V2 int = 0x00000010
const PIOC_PLAINTEXT_CONNECT_V2 int = 0x0000002a
const PIOC_PRNG_V2 int = 0x0000002b
const PIOC_STARTTLS_LOCALID_V2 int = 0x00000028
const PIOC_STARTTLS_V2 int = 0x00000024
const PIOC_SUCCESS_V2 int = 0x00000000
const PIOF_FACILITY_ALL_CURRENT int = 0x00000001
const PIOF_FACILITY_STARTGSS int = 0x00000002
const PIOF_FACILITY_STARTSSH int = 0x00000004
const PIOF_FACILITY_STARTTLS int = 0x00000001
const PIOF_LIDENTRY_DBAPPEND int = 0x00004000
const PIOF_LIDENTRY_DBENTRY int = 0x00001000
const PIOF_LIDENTRY_DBINSERT int = 0x00002000
const PIOF_LIDENTRY_DBREORDER int = 0x00008000
const PIOF_LIDENTRY_NEW int = 0x00100000
const PIOF_LIDENTRY_ONTHEFLY int = 0x00200000
const PIOF_LIDENTRY_REGFLAGS int = 0x00000fff
const PIOF_LIDENTRY_SKIP_DBENTRY int = 0x00000080
const PIOF_LIDENTRY_SKIP_DOMAIN_ONEUP int = 0x00000084
const PIOF_LIDENTRY_SKIP_DOMAIN_SAME int = 0x00000082
const PIOF_LIDENTRY_SKIP_DOMAIN_SUB int = 0x00000086
const PIOF_LIDENTRY_SKIP_NOTROOT int = 0x00000088
const PIOF_LIDENTRY_SKIP_USER int = 0x00000081
const PIOF_LIDENTRY_WANT_DBENTRY int = 0x00000100
const PIOF_STARTTLS_DETACH int = 0x00002000
const PIOF_STARTTLS_DOMAIN_REPRESENTS_USER int = 0x00008000
const PIOF_STARTTLS_DTLS int = 0x00000100
const PIOF_STARTTLS_FORK int = 0x00004000
const PIOF_STARTTLS_IGNORE_CACHES int = 0x00000400
const PIOF_STARTTLS_IGNORE_REMOTEID int = 0x00001000
const PIOF_STARTTLS_LOCALID_CHECK int = 0x00010000
const PIOF_STARTTLS_LOCALID_ONTHEFLY int = 0x00040000
const PIOF_STARTTLS_LOCALROLE_CLIENT int = 0x00000001
const PIOF_STARTTLS_LOCALROLE_PEER int = 0x00000003
const PIOF_STARTTLS_LOCALROLE_SERVER int = 0x00000002
const PIOF_STARTTLS_REMOTEROLE_CLIENT int = 0x00000004
const PIOF_STARTTLS_REMOTEROLE_PEER int = 0x0000000c
const PIOF_STARTTLS_REMOTEROLE_SERVER int = 0x00000008
const PIOF_STARTTLS_RENEGOTIATE int = 0x00020000
const PIOF_STARTTLS_REQUEST_REMOTEID int = 0x00000800
const PIOF_STARTTLS_WITHOUT_SNI int = 0x00000200
const TLSPOOL_CTLKEYLEN int = 16
const TLSPOOL_DEFAULT_PIDFILE_PATH string = "/var/run/tlspool.pid"
const TLSPOOL_DEFAULT_SOCKET_PATH string = "/var/run/tlspool.sock"
const TLSPOOL_IDENTITY_V2 string = "20151111api@tlspool.arpa2.net"
const TLSPOOL_PRNGBUFLEN int = 350
const TLSPOOL_SERVICELEN int = 16
const TLSPOOL_TIMEOUT_DEFAULT int = 0

